---
title: "Professional précis"
---

First Professional précis:

Summary of the reading titled Software Engineering at Google:

This article focuses on writing code and how an organization would build and maintain the code. A sound software engineer should be able to think about the possible practices to make their code sustainable over time. The book recommends the following three fundamentals that a software engineer should keep in mind during their process:

Time and Change -
How code will need to adapt over the length of its life.

Scale and Growth -
How an organization will need to adapt as it evolves.

Trade-offs and Cost -
How an organization makes decisions, based on the lessons of Time and Change and Scale and Growth.

Google has proposed a unique view on the growth and evolution of a sustainable software ecosystem. Google divided its thinking into three different aspects of its software engineering landscape. 

Culture - Software engineering is a team effort, so proper cultural elements are needed to ensure the organization grows and remains healthy.

Process - Many software engineers are familiar with testing their code to ensure its sustainability. However, Google has a large and long-lived code base, requiring much more extensive and intense testing to develop the best practices. From testing at such a large scale, Google has found many areas where they still need satisfying answers.

Tools -  Tooling refers to the leverage of investments in infrastructure to provide benefits in code bases as they grow and age. Some tools may be specific to the experience of Google, though there are third-party alternatives that can provide tools to the public.

The Culture, Process, and Tools outlined in Software Engineering at Google provide lessons that all software engineers should learn on the job.  



Second Professional précis:

Summary:

The article “What is software engineering?” is about just that. Software engineering is a team-organized project focused on composition and bug fixes for long-term or short-term performance. The article talks about how software engineering and programming are very different. As we know, programming is linked to the generation of new software. However, a programming task is often an act of individual creation, while a software engineering task is a team effort. This is a very base-level difference between the two, so a better explanation of their differences would be through the complexity and the stakes behind such complexity. As software engineers, we are often expected to evaluate the tradeoffs between different ways of moving forward. Sometimes, it can have high stakes, often with imperfect value metrics. Software engineers or software engineering leaders need to aim for sustainability and maintain good management of the scaling costs for the organization. Hyrum law teaches that if you are using a project that is also used by other engineers, you need to focus on “Is it maintainable?” This is Hyrum’s law: “With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.” 

Reflection: 

This article gave me a new perspective on what a software engineer does. The most significant part of being a software engineer is working together with others to fix long and complex problems for the short or long term. The book did an excellent job of understanding what types of issues a software engineer would run into and how to solve them. The book focuses heavily on the scale and sustainability of code over time. This is something that I had never considered previously, and now I will have to figure out a way to make my code last. 

Action Items:

Using the factors that affect the flexibility of a code base could be helpful in our class discussions. The article makes excellent points that would make us a better team if used correctly. 

Expertise:
 We know how to do this; for some languages, we’ve now done hundreds of compiler upgrades across many platforms.

Stability:
 There is less change between releases because we adopt releases more regularly; for some languages, we’re now deploying compiler upgrades every week or two.

Conformity:
 There is less code that hasn’t been through an upgrade already, again because we are upgrading regularly.

Familiarity:
 Because we do this regularly enough, we can spot redundancies in the process of performing an upgrade and attempt to automate. This overlaps significantly with SRE views on toil.15

Policy:
 We have processes and policies like the Beyoncé Rule. The net effect of these processes is that upgrades remain feasible because infrastructure teams do not need to worry about every unknown usage, only the ones that are visible in our CI systems.
